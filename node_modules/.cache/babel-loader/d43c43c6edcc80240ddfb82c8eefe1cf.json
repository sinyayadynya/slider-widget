{"ast":null,"code":"/**\n * @file\n * Class to identify the correct language code.\n *\n * FIXME Langcode esla fallsback to es, because there is not a langcode\n *       to include all latin american Spanish variants on react-intl.\n */\nimport messages_en from '../../locales/en.json';\nimport messages_es from '../../locales/es.json';\nimport messages_fr from '../../locales/fr.json';\nimport messages_ru from '../../locales/ru.json';\nconst localeData = {\n  en: messages_en,\n  es: messages_es,\n  fr: messages_fr,\n  ru: messages_ru\n};\nexport default class i18n {\n  constructor(langcode) {\n    this.locale = langcode;\n  }\n  mapLocale(langcode) {\n    // Specific overrides.\n    switch (langcode) {\n      default:\n        return langcode;\n    }\n\n    // Check messages for locale\n    if (typeof localeData[langcode.toLowerCase()] !== 'undefined') {\n      return langcode.toLowerCase();\n    }\n\n    // Check messages for language\n    const locale = langcode.split('-', 2);\n    if (typeof localeData[locale[0]] !== 'undefined') {\n      return locale[0];\n    }\n\n    // Default is English\n    return 'en';\n  }\n  set locale(langcode) {\n    this._locale = this.mapLocale(langcode || 'en');\n  }\n  get locale() {\n    return this._locale;\n  }\n  get messages() {\n    return localeData[this.locale];\n  }\n}","map":{"version":3,"names":["messages_en","messages_es","messages_fr","messages_ru","localeData","en","es","fr","ru","i18n","constructor","langcode","locale","mapLocale","toLowerCase","split","_locale","messages"],"sources":["/Users/sahaj/Sites/_react/slider-widget/src/core/bin/i18n.js"],"sourcesContent":["/**\n * @file\n * Class to identify the correct language code.\n *\n * FIXME Langcode esla fallsback to es, because there is not a langcode\n *       to include all latin american Spanish variants on react-intl.\n */\nimport messages_en from '../../locales/en.json'\nimport messages_es from '../../locales/es.json'\nimport messages_fr from '../../locales/fr.json'\nimport messages_ru from '../../locales/ru.json'\n\nconst localeData = {\n  en: messages_en,\n  es: messages_es,\n  fr: messages_fr,\n  ru: messages_ru,\n}\n\nexport default class i18n {\n  constructor(langcode) {\n    this.locale = langcode\n  }\n\n  mapLocale(langcode) {\n    // Specific overrides.\n    switch (langcode) {\n      default:\n        return langcode\n    }\n\n    // Check messages for locale\n    if (typeof localeData[langcode.toLowerCase()] !== 'undefined') {\n      return langcode.toLowerCase()\n    }\n\n    // Check messages for language\n    const locale = langcode.split('-', 2)\n    if (typeof localeData[locale[0]] !== 'undefined') {\n      return locale[0]\n    }\n\n    // Default is English\n    return 'en'\n  }\n\n  set locale(langcode) {\n    this._locale = this.mapLocale(langcode || 'en')\n  }\n\n  get locale() {\n    return this._locale\n  }\n\n  get messages() {\n    return localeData[this.locale]\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,OAAOC,WAAW,MAAM,uBAAuB;AAE/C,MAAMC,UAAU,GAAG;EACjBC,EAAE,EAAEL,WAAW;EACfM,EAAE,EAAEL,WAAW;EACfM,EAAE,EAAEL,WAAW;EACfM,EAAE,EAAEL;AACN,CAAC;AAED,eAAe,MAAMM,IAAI,CAAC;EACxBC,WAAW,CAACC,QAAQ,EAAE;IACpB,IAAI,CAACC,MAAM,GAAGD,QAAQ;EACxB;EAEAE,SAAS,CAACF,QAAQ,EAAE;IAClB;IACA,QAAQA,QAAQ;MACd;QACE,OAAOA,QAAQ;IAAA;;IAGnB;IACA,IAAI,OAAOP,UAAU,CAACO,QAAQ,CAACG,WAAW,EAAE,CAAC,KAAK,WAAW,EAAE;MAC7D,OAAOH,QAAQ,CAACG,WAAW,EAAE;IAC/B;;IAEA;IACA,MAAMF,MAAM,GAAGD,QAAQ,CAACI,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACrC,IAAI,OAAOX,UAAU,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,WAAW,EAAE;MAChD,OAAOA,MAAM,CAAC,CAAC,CAAC;IAClB;;IAEA;IACA,OAAO,IAAI;EACb;EAEA,IAAIA,MAAM,CAACD,QAAQ,EAAE;IACnB,IAAI,CAACK,OAAO,GAAG,IAAI,CAACH,SAAS,CAACF,QAAQ,IAAI,IAAI,CAAC;EACjD;EAEA,IAAIC,MAAM,GAAG;IACX,OAAO,IAAI,CAACI,OAAO;EACrB;EAEA,IAAIC,QAAQ,GAAG;IACb,OAAOb,UAAU,CAAC,IAAI,CAACQ,MAAM,CAAC;EAChC;AACF"},"metadata":{},"sourceType":"module"}