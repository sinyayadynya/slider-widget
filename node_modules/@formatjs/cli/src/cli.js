"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander = require("commander");
var loudRejection = require("loud-rejection");
var extract_1 = require("./extract");
var glob_1 = require("glob");
var KNOWN_COMMANDS = ['extract'];
function main(argv) {
    return __awaiter(this, void 0, void 0, function () {
        var version;
        var _this = this;
        return __generator(this, function (_a) {
            loudRejection();
            version = require('../package.json').version;
            commander
                .version(version, '-v, --version')
                .usage('<command> [flags]')
                .action(function (command) {
                if (!KNOWN_COMMANDS.includes(command)) {
                    commander.help();
                }
            });
            commander
                .command('help', { isDefault: true })
                .description('Show this help message.')
                .action(function () { return commander.help(); });
            // Long text wrapping to available terminal columns: https://github.com/tj/commander.js/pull/956
            // NOTE: please keep the help text in sync with babel-plugin-react-intl documentation.
            commander
                .command('extract [files...]')
                .description([
                'Extract string messages from React components that use react-intl.',
                'The input language is expected to be TypeScript or ES2017 with JSX.',
            ].join('\n'))
                .option('--messages-dir <dir>', [
                'The target location where the plugin will output a `.json` file corresponding to each ',
                'component from which React Intl messages were extracted. If not provided, the extracted ',
                'message descriptors will be printed to standard output.',
            ].join(''))
                .option('--out-file <path>', [
                'The target file path where the plugin will output an aggregated `.json` file of all',
                'the translations from the `files` supplied.\n',
                'This flag will ignore --messages-dir',
            ].join(''))
                .option('--id-interpolation-pattern <pattern>', [
                "If certain message descriptors don't have id, this `pattern` will be used to automatically",
                'generate IDs for them. Default to `[contenthash:5]`.\n',
                'See https://github.com/webpack/loader-utils#interpolatename for sample patterns',
            ].join(''), '[contenthash:5]')
                .option('--extract-source-location', [
                'Whether the metadata about the location of the message in the source file should be ',
                'extracted. If `true`, then `file`, `start`, and `end` fields will exist for each ',
                'extracted message descriptors.',
            ].join(''), false)
                .option('--module-source-name <name>', [
                'The ES6 module source name of the React Intl package. Defaults to: `"react-intl"`, ',
                'but can be changed to another name/path to React Intl.',
            ].join(''))
                .option('--remove-default-message', 'Remove `defaultMessage` field in generated js after extraction', false)
                .option('--additional-component-names <comma-separated-names>', [
                "Additional component names to extract messages from, e.g: `['FormattedFooBarMessage']`. ",
                '**NOTE**: By default we check for the fact that `FormattedMessage` ',
                'is imported from `moduleSourceName` to make sure variable alias ',
                "works. This option does not do that so it's less safe.",
            ].join(''), function (val) { return val.split(','); })
                .option('--extract-from-format-message-call', [
                'Opt-in to extract from `intl.formatMessage` call with the same restrictions, e.g: has ',
                "to be called with object literal such as `intl.formatMessage({ id: 'foo', defaultMessage: ",
                "'bar', description: 'baz'})`",
            ].join(''), true)
                .option('--output-empty-json', 'Output file with empty [] if src has no messages. For build systems like bazel that relies on specific output mapping, not writing out a file can cause issues.', false)
                .option('--ignore <files>', 'List of glob paths to **not** extract translations from.')
                .option('--throws', 'Whether to throw an exception when we fail to process any file in the batch.')
                .option('--pragma <pragma>', "parse specific additional custom pragma. This allows you to tag certain file with metadata such as `project`. For example with this file:\n\n      ```\n      // @intl-meta project:my-custom-project\n      import {FormattedMessage} from 'react-intl';\n\n      <FormattedMessage defaultMessage=\"foo\" id=\"bar\" />;\n      ```\n\n      and with option `{pragma: \"@intl-meta\"}`, we'll parse out `// @intl-meta project:my-custom-project` into `{project: 'my-custom-project'}` in the result file.")
                .action(function (files, cmdObj) { return __awaiter(_this, void 0, void 0, function () {
                var processedFiles, _i, files_1, f;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            processedFiles = [];
                            for (_i = 0, files_1 = files; _i < files_1.length; _i++) {
                                f = files_1[_i];
                                processedFiles.push.apply(processedFiles, glob_1.sync(f, {
                                    cwd: process.cwd(),
                                    ignore: cmdObj.ignore,
                                }));
                            }
                            return [4 /*yield*/, extract_1.default(processedFiles, {
                                    outFile: cmdObj.outFile,
                                    idInterpolationPattern: cmdObj.idInterpolationPattern || '[sha1:contenthash:base64:6]',
                                    messagesDir: cmdObj.messagesDir,
                                    extractSourceLocation: cmdObj.extractSourceLocation,
                                    moduleSourceName: cmdObj.moduleSourceName,
                                    removeDefaultMessage: cmdObj.removeDefaultMessage,
                                    additionalComponentNames: cmdObj.additionalComponentNames,
                                    extractFromFormatMessageCall: cmdObj.extractFromFormatMessageCall,
                                    outputEmptyJson: cmdObj.outputEmptyJson,
                                    throws: cmdObj.throws,
                                    pragma: cmdObj.pragma,
                                    // It is possible that the glob pattern does NOT match anything.
                                    // But so long as the glob pattern is provided, don't read from stdin.
                                    readFromStdin: files.length === 0,
                                })];
                        case 1:
                            _a.sent();
                            process.exit(0);
                            return [2 /*return*/];
                    }
                });
            }); });
            if (argv.length < 3) {
                commander.help();
            }
            else {
                commander.parse(argv);
            }
            return [2 /*return*/];
        });
    });
}
exports.default = main;
