"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var babel = require("@babel/core");
var console_utils_1 = require("./console_utils");
var fs_extra_1 = require("fs-extra");
var ts_transformer_1 = require("@formatjs/ts-transformer");
function getBabelConfig(reactIntlOptions, extraBabelOptions) {
    if (extraBabelOptions === void 0) { extraBabelOptions = {}; }
    return __assign({ babelrc: false, configFile: false, parserOpts: {
            plugins: [
                'asyncGenerators',
                'bigInt',
                'classPrivateMethods',
                'classPrivateProperties',
                'classProperties',
                'decorators-legacy',
                'doExpressions',
                'dynamicImport',
                'exportDefaultFrom',
                'functionBind',
                'functionSent',
                'importMeta',
                'jsx',
                'logicalAssignment',
                'nullishCoalescingOperator',
                'numericSeparator',
                'objectRestSpread',
                'optionalCatchBinding',
                'optionalChaining',
                'partialApplication',
                'placeholders',
                'throwExpressions',
                'topLevelAwait',
                'typescript',
            ],
        }, 
        // We need to use require.resolve here, or otherwise the lookup is based on the current working
        // directory of the CLI.
        plugins: [[require.resolve('babel-plugin-react-intl'), reactIntlOptions]], highlightCode: true, 
        // Extraction of string messages does not output the transformed JavaScript.
        sourceMaps: false }, extraBabelOptions);
}
function extract(files, _a) {
    var idInterpolationPattern = _a.idInterpolationPattern, throws = _a.throws, readFromStdin = _a.readFromStdin, babelOpts = __rest(_a, ["idInterpolationPattern", "throws", "readFromStdin"]);
    return __awaiter(this, void 0, void 0, function () {
        var stdinSource, babelResult, results;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!readFromStdin) return [3 /*break*/, 2];
                    // Read from stdin
                    if (process.stdin.isTTY) {
                        console_utils_1.warn('Reading source file from TTY.');
                    }
                    if (!babelOpts.overrideIdFn && idInterpolationPattern) {
                        babelOpts = __assign(__assign({}, babelOpts), { overrideIdFn: function (id, defaultMessage, description) {
                                return id ||
                                    ts_transformer_1.interpolateName({
                                        resourcePath: 'dummy',
                                    }, idInterpolationPattern, { content: defaultMessage + (description ? '#' + description : '') });
                            } });
                    }
                    return [4 /*yield*/, console_utils_1.getStdinAsString()];
                case 1:
                    stdinSource = _b.sent();
                    babelResult = babel.transformSync(stdinSource, getBabelConfig(babelOpts));
                    return [2 /*return*/, [
                            babelResult.metadata['react-intl'],
                        ]];
                case 2: return [4 /*yield*/, Promise.all(files.map(function (filename) {
                        if (!babelOpts.overrideIdFn && idInterpolationPattern) {
                            babelOpts = __assign(__assign({}, babelOpts), { overrideIdFn: function (id, defaultMessage, description) {
                                    return id ||
                                        ts_transformer_1.interpolateName({
                                            resourcePath: filename,
                                        }, idInterpolationPattern, {
                                            content: description
                                                ? defaultMessage + "#" + description
                                                : defaultMessage,
                                        });
                                } });
                        }
                        var promise = babel.transformFileAsync(filename, getBabelConfig(babelOpts, { filename: filename }));
                        return throws ? promise : promise.catch(function (e) { return console_utils_1.warn(e); });
                    }))];
                case 3:
                    results = _b.sent();
                    return [2 /*return*/, results
                            .filter(function (r) { return r && r.metadata; })
                            .map(function (r) {
                            return r.metadata['react-intl'];
                        })];
            }
        });
    });
}
exports.extract = extract;
function extractAndWrite(files, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var outFile, throws, extractOpts, extractionResults, printMessagesToStdout, extractedMessages, _i, extractionResults_1, messages, _a, _b, message, id, description, defaultMessage, existing, error, results;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    outFile = opts.outFile, throws = opts.throws, extractOpts = __rest(opts, ["outFile", "throws"]);
                    if (outFile) {
                        extractOpts.messagesDir = undefined;
                    }
                    return [4 /*yield*/, extract(files, extractOpts)];
                case 1:
                    extractionResults = _c.sent();
                    printMessagesToStdout = extractOpts.messagesDir == null && !outFile;
                    extractedMessages = new Map();
                    for (_i = 0, extractionResults_1 = extractionResults; _i < extractionResults_1.length; _i++) {
                        messages = extractionResults_1[_i].messages;
                        for (_a = 0, _b = messages !== null && messages !== void 0 ? messages : []; _a < _b.length; _a++) {
                            message = _b[_a];
                            id = message.id, description = message.description, defaultMessage = message.defaultMessage;
                            if (extractedMessages.has(id)) {
                                existing = extractedMessages.get(id);
                                if (description !== existing.description ||
                                    defaultMessage !== existing.defaultMessage) {
                                    error = new Error("[React Intl] Duplicate message id: \"" + id + "\", " +
                                        'but the `description` and/or `defaultMessage` are different.');
                                    if (throws) {
                                        throw error;
                                    }
                                    else {
                                        console_utils_1.warn(error.message);
                                    }
                                }
                            }
                            extractedMessages.set(message.id, message);
                        }
                    }
                    results = Array.from(extractedMessages.values());
                    if (outFile) {
                        fs_extra_1.outputJSONSync(outFile, results, {
                            spaces: 2,
                        });
                    }
                    if (printMessagesToStdout) {
                        process.stdout.write(JSON.stringify(results, null, 2));
                        process.stdout.write('\n');
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = extractAndWrite;
